{"version":3,"sources":["logo.svg","Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TableHeader","TableBody","props","characterData","removeCharacter","rows","map","chara","i","key","name","job","age","onClick","Table","this","Component","characters","App","state","className","index","filter","_","setState","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"0JAAAA,EAAOC,QAAU,IAA0B,kC,qICErCC,G,YAAc,WAClB,OACE,+BACE,4BACE,oCACA,mCACA,uCAMFC,EAAY,SAAAC,GAC2BA,EAAnCC,cADkB,IACHC,EAAoBF,EAApBE,gBACjBC,EAAOH,EAAMC,cAAcG,IAAI,SAACC,EAAOC,GAC3C,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAMG,MACX,4BAAKH,EAAMI,KACX,4BAAKJ,EAAMK,KACX,4BACE,4BACEC,QAAS,WACPT,EAAgBI,KAFpB,cAWR,OAAO,+BAAQH,IAkBFS,E,iLAdH,IAAD,EACoCC,KAAKb,MAAxCC,EADD,EACCA,cAAeC,EADhB,EACgBA,gBACvB,OACE,+BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACED,cAAeA,EACfC,gBAAiBA,S,GARPY,aChCdC,EAAa,CACjB,CACEP,KAAM,eACNC,IAAK,qBACLC,IAAK,IAEP,CACEF,KAAM,qBACNC,IAAK,qBACLC,IAAK,IAEP,CACEF,KAAM,2BACNC,IAAK,qBACLC,IAAK,IAEP,CACEF,KAAM,2BACNC,IAAK,qBACLC,IAAK,IAGP,CACEF,KAAM,qBACNC,IAAK,mDACLC,IAAK,4BAGP,CACEF,KAAM,eACNC,IAAK,2BACLC,IAAK,uBA8BMM,E,YAzBb,WAAYhB,GAAQ,IAAD,8BACjB,4CAAMA,KACDiB,MAAQ,CAAEF,cAFE,E,sEAKT,IAAD,OACP,OACE,yBAAKG,UAAU,OACb,kBAAC,EAAD,CACEjB,cAAeY,KAAKI,MAAMF,WAC1Bb,gBAAiB,SAAAiB,GACf,EAAKjB,gBAAgBiB,MAJ3B,oB,sCAYYA,GACd,IAAMJ,EAAaF,KAAKI,MAAMF,WAAWK,OAAO,SAACC,EAAGf,GAAJ,OAAUA,IAAMa,IAChEN,KAAKS,SAAS,CAAEP,mB,GAtBFQ,IAAMT,WC5BJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ddc9d2cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\n\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Job</th>\n        <th>age</th>\n      </tr>\n    </thead>\n  );\n};\n\nconst TableBody = props => {\n  const { characterData, removeCharacter } = props;\n  const rows = props.characterData.map((chara, i) => {\n    return (\n      <tr key={i}>\n        <td>{chara.name}</td>\n        <td>{chara.job}</td>\n        <td>{chara.age}</td>\n        <td>\n          <button\n            onClick={() => {\n              removeCharacter(i);\n            }}\n          >\n            Delete\n          </button>\n        </td>\n      </tr>\n    );\n  });\n  return <tbody>{rows}</tbody>;\n};\n\nclass Table extends Component {\n  render() {\n    const { characterData, removeCharacter } = this.props;\n    return (\n      <table>\n        <TableHeader />\n        <TableBody\n          characterData={characterData}\n          removeCharacter={removeCharacter}\n        />\n      </table>\n    );\n  }\n}\n\nexport default Table;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Table from \"./Table\";\n\nconst characters = [\n  {\n    name: \"ゴン\",\n    job: \"強化系\",\n    age: 12\n  },\n  {\n    name: \"キルア\",\n    job: \"変化形\",\n    age: 12\n  },\n  {\n    name: \"クラピカ\",\n    job: \"特殊系\",\n    age: 18\n  },\n  {\n    name: \"レオリオ\",\n    job: \"放出系\",\n    age: 20\n  },\n\n  {\n    name: \"ネテロ\",\n    job: \"ハンター協会会長\",\n    age: \"超じじい\"\n  },\n\n  {\n    name: \"ゼノ\",\n    job: \"一日一殺\",\n    age: \"じじい\"\n  }\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { characters };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Table\n          characterData={this.state.characters}\n          removeCharacter={index => {\n            this.removeCharacter(index);\n          }}\n        />\n        Hello aaaaaaaa\n      </div>\n    );\n  }\n\n  removeCharacter(index) {\n    const characters = this.state.characters.filter((_, i) => i !== index);\n    this.setState({ characters });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}